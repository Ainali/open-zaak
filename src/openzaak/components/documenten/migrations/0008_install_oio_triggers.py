# Generated by Django 2.2.4 on 2019-08-22 14:38

from django.db import migrations

# See https://www.postgresql.org/docs/current/plpgsql-trigger.html for more
# information about triggers. Essentially, we define on the database that
# some denormalization actions need to happen, so we don't need to handle it
# in Django (where things like bulk_create or weird manual update stuff can
# break the business logic).

INSTALL_TRIGGERS = [
    """
    CREATE FUNCTION sync_oio() RETURNS trigger AS $sync_oio$
        DECLARE
            object_type     varchar(20);
            zaak_id         integer;
            besluit_id      integer;
        BEGIN
            --
            -- Create a row in documenten_objectinformatieobject if a
            -- * zaakinformatieobject or
            -- * besluitinformatieobject
            -- is created.
            IF (TG_OP = 'INSERT') THEN

                -- handle zio vs bio - set insert variables
                IF (TG_TABLE_NAME = 'zaken_zaakinformatieobject') THEN
                    object_type = 'zaak';
                    zaak_id = NEW.zaak_id;
                ELSIF (TG_TABLE_NAME = 'besluiten_besluitinformatieobject') THEN
                    object_type = 'besluit';
                    besluit_id = NEW.besluit_id;
                ELSE
                    RAISE EXCEPTION 'table % not supported for trigger', TG_TABLE_NAME;
                END IF;

                -- inser the OIO
                INSERT INTO documenten_objectinformatieobject (
                        uuid,
                        informatieobject_id,
                        object_type,
                        zaak_id,
                        besluit_id
                    ) VALUES (
                        -- generate uuid
                        uuid_generate_v4(),
                        -- canonical io fk
                        NEW.informatieobject_id,
                        object_type,
                        zaak_id,
                        besluit_id
                    );

            END IF;
            RETURN NULL;  -- result is ignored since this is an AFTER trigger
        END;
    $sync_oio$ LANGUAGE plpgsql;
    """,

    """
    CREATE TRIGGER sync_oio AFTER INSERT OR UPDATE ON zaken_zaakinformatieobject
        FOR EACH ROW EXECUTE FUNCTION sync_oio();
    """,

    """
    CREATE TRIGGER sync_oio AFTER INSERT OR UPDATE ON besluiten_besluitinformatieobject
        FOR EACH ROW EXECUTE FUNCTION sync_oio();
    """,
]

UNINSTALL_TRIGGERS = [
    "DROP TRIGGER sync_oio ON zaken_zaakinformatieobject;",
    "DROP TRIGGER sync_oio ON besluiten_besluitinformatieobject;",
    "DROP FUNCTION sync_oio;",
]


class Migration(migrations.Migration):

    dependencies = [
        ("zaken", "0004_auto_20190820_0945"),
        ("besluiten", "0003_auto_20190820_0945"),
        ("documenten", "0007_install_uuid_extension"),
    ]

    operations = [
        migrations.RunSQL(INSTALL_TRIGGERS, UNINSTALL_TRIGGERS),
    ]
